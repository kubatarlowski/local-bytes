{"ast":null,"code":"var _jsxFileName = \"/home/kubatarlowski/local-bytes/src/Components/Categories/Categories.js\";\nimport React, { useState } from 'react';\nimport styles from './Categories.module.css';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\n\nconst Categories = props => {\n  let initalizedCheckedCat = {};\n\n  for (category in props.categories) {\n    initalizedCheckedCat.category = false;\n  }\n\n  const [checkedCat, setCheckedCat] = useState(initalizedCheckedCat);\n  setCheckedCat(initalizedCheckedCat);\n\n  function updateChecked(category) {\n    const oldChecked = { ...checkedCat\n    };\n    oldChecked[category] = !checkedCat[category];\n    setCheckedCat(oldChecked);\n  }\n\n  const checkboxes = props.categories.map((cat, index) => {\n    return /*#__PURE__*/React.createElement(FormControlLabel, {\n      key: cat,\n      label: cat,\n      control: /*#__PURE__*/React.createElement(Checkbox, {\n        onChange: () => {\n          updateChecked(cat);\n          props.checked(cat, checkedCat[cat], index);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 26\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 13\n      }\n    });\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.Categories,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }\n  }, \"Categories\"), checkboxes);\n};\n\nexport default Categories;","map":{"version":3,"sources":["/home/kubatarlowski/local-bytes/src/Components/Categories/Categories.js"],"names":["React","useState","styles","Checkbox","FormControlLabel","Categories","props","initalizedCheckedCat","category","categories","checkedCat","setCheckedCat","updateChecked","oldChecked","checkboxes","map","cat","index","checked"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,gBAAP,MAA6B,oCAA7B;;AAEA,MAAMC,UAAU,GAAGC,KAAK,IAAI;AAExB,MAAIC,oBAAoB,GAAG,EAA3B;;AACA,OAAKC,QAAL,IAAiBF,KAAK,CAACG,UAAvB,EAAmC;AAC/BF,IAAAA,oBAAoB,CAACC,QAArB,GAAgC,KAAhC;AACH;;AAED,QAAM,CAACE,UAAD,EAAaC,aAAb,IAA8BV,QAAQ,CAACM,oBAAD,CAA5C;AAGAI,EAAAA,aAAa,CAACJ,oBAAD,CAAb;;AACA,WAASK,aAAT,CAAuBJ,QAAvB,EAAiC;AAC7B,UAAMK,UAAU,GAAG,EAAC,GAAGH;AAAJ,KAAnB;AACAG,IAAAA,UAAU,CAACL,QAAD,CAAV,GAAuB,CAACE,UAAU,CAACF,QAAD,CAAlC;AACAG,IAAAA,aAAa,CAACE,UAAD,CAAb;AACH;;AAED,QAAMC,UAAU,GAAGR,KAAK,CAACG,UAAN,CAAiBM,GAAjB,CAAqB,CAACC,GAAD,EAAKC,KAAL,KAAe;AACnD,wBACI,oBAAC,gBAAD;AACI,MAAA,GAAG,EAAED,GADT;AAEI,MAAA,KAAK,EAAEA,GAFX;AAGI,MAAA,OAAO,eAAE,oBAAC,QAAD;AAAU,QAAA,QAAQ,EAAE,MAAK;AAC9BJ,UAAAA,aAAa,CAACI,GAAD,CAAb;AACAV,UAAAA,KAAK,CAACY,OAAN,CAAcF,GAAd,EAAkBN,UAAU,CAACM,GAAD,CAA5B,EAAkCC,KAAlC;AACF,SAHO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ;AAQS,GATM,CAAnB;AAWA,sBACI;AAAK,IAAA,SAAS,EAAEf,MAAM,CAACG,UAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,EAEKS,UAFL,CADJ;AAMH,CAlCD;;AAoCA,eAAeT,UAAf","sourcesContent":["import React, { useState } from 'react';\nimport styles from './Categories.module.css';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\n\nconst Categories = props => {\n\n    let initalizedCheckedCat = {}    \n    for (category in props.categories) {\n        initalizedCheckedCat.category = false;\n    }\n\n    const [checkedCat, setCheckedCat] = useState(initalizedCheckedCat)\n\n\n    setCheckedCat(initalizedCheckedCat)\n    function updateChecked(category) {\n        const oldChecked = {...checkedCat}\n        oldChecked[category] = !checkedCat[category]\n        setCheckedCat(oldChecked)\n    }\n\n    const checkboxes = props.categories.map((cat,index) => {\n        return (\n            <FormControlLabel\n                key={cat}\n                label={cat}\n                control={<Checkbox onChange={()=> {\n                    updateChecked(cat)\n                    props.checked(cat,checkedCat[cat],index\n                )}}/>\n            }/>)})\n\n    return (\n        <div className={styles.Categories}>\n            <header>Categories</header>\n            {checkboxes}\n        </div>\n    )\n}\n\nexport default Categories;"]},"metadata":{},"sourceType":"module"}