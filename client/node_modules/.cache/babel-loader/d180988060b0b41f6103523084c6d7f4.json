{"ast":null,"code":"var _jsxFileName = \"/home/kubatarlowski/local-bytes/src/Components/Search/Search.js\";\nimport Autocomplete from 'react-google-autocomplete';\nimport React, { useState } from 'react';\n\nconst search = () => {\n  /**\n   * When the user types an address in the search box\n   * @param place\n   */\n  const [location, setLocation] = useState({\n    address: '',\n    area: '',\n    city: city ? city : '',\n    state: state ? state : '',\n    markerPosition: {\n      lat: '',\n      lng: ''\n    },\n    mapPosition: {\n      lat: '',\n      lng: ''\n    }\n  });\n\n  const onPlaceSelected = place => {\n    const address = place.formatted_address;\n    const addressArray = place.address_components;\n    const city = this.getCity(addressArray);\n    const area = this.getArea(addressArray);\n    const state = this.getState(addressArray);\n    const latValue = place.geometry.location.lat();\n    const lngValue = place.geometry.location.lng(); // Set these values in the state.\n\n    setLocation({\n      address: address ? address : '',\n      area: area ? area : '',\n      city: city ? city : '',\n      state: state ? state : '',\n      markerPosition: {\n        lat: latValue,\n        lng: lngValue\n      },\n      mapPosition: {\n        lat: latValue,\n        lng: lngValue\n      }\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(Autocomplete, {\n    style: {\n      width: '100%',\n      height: '40px',\n      paddingLeft: '16px',\n      marginTop: '2px',\n      marginBottom: '100px'\n    },\n    onPlaceSelected: onPlaceSelected,\n    types: ['(regions)'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  });\n};\n\nexport default search;","map":{"version":3,"sources":["/home/kubatarlowski/local-bytes/src/Components/Search/Search.js"],"names":["Autocomplete","React","useState","search","location","setLocation","address","area","city","state","markerPosition","lat","lng","mapPosition","onPlaceSelected","place","formatted_address","addressArray","address_components","getCity","getArea","getState","latValue","geometry","lngValue","width","height","paddingLeft","marginTop","marginBottom"],"mappings":";AAAA,OAAOA,YAAP,MAAyB,2BAAzB;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;AAEA,MAAMC,MAAM,GAAG,MAAM;AACjB;;;;AAKA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BH,QAAQ,CAAC;AACrCI,IAAAA,OAAO,EAAE,EAD4B;AAErCC,IAAAA,IAAI,EAAE,EAF+B;AAGrCC,IAAAA,IAAI,EAAIA,IAAF,GAAWA,IAAX,GAAkB,EAHa;AAIrCC,IAAAA,KAAK,EAAIA,KAAF,GAAYA,KAAZ,GAAoB,EAJU;AAKrCC,IAAAA,cAAc,EAAE;AACZC,MAAAA,GAAG,EAAE,EADO;AAEZC,MAAAA,GAAG,EAAE;AAFO,KALqB;AASrCC,IAAAA,WAAW,EAAE;AACTF,MAAAA,GAAG,EAAE,EADI;AAETC,MAAAA,GAAG,EAAE;AAFI;AATwB,GAAD,CAAxC;;AAeA,QAAME,eAAe,GAAGC,KAAK,IAAI;AAC7B,UAAMT,OAAO,GAAGS,KAAK,CAACC,iBAAtB;AACA,UAAMC,YAAY,GAAIF,KAAK,CAACG,kBAA5B;AACA,UAAMV,IAAI,GAAG,KAAKW,OAAL,CAAcF,YAAd,CAAb;AACA,UAAMV,IAAI,GAAG,KAAKa,OAAL,CAAcH,YAAd,CAAb;AACA,UAAMR,KAAK,GAAG,KAAKY,QAAL,CAAeJ,YAAf,CAAd;AACA,UAAMK,QAAQ,GAAGP,KAAK,CAACQ,QAAN,CAAenB,QAAf,CAAwBO,GAAxB,EAAjB;AACA,UAAMa,QAAQ,GAAGT,KAAK,CAACQ,QAAN,CAAenB,QAAf,CAAwBQ,GAAxB,EAAjB,CAP6B,CAS7B;;AACAP,IAAAA,WAAW,CAAC;AACRC,MAAAA,OAAO,EAAIA,OAAF,GAAcA,OAAd,GAAwB,EADzB;AAERC,MAAAA,IAAI,EAAIA,IAAF,GAAWA,IAAX,GAAkB,EAFhB;AAGRC,MAAAA,IAAI,EAAIA,IAAF,GAAWA,IAAX,GAAkB,EAHhB;AAIRC,MAAAA,KAAK,EAAIA,KAAF,GAAYA,KAAZ,GAAoB,EAJnB;AAKRC,MAAAA,cAAc,EAAE;AACZC,QAAAA,GAAG,EAAEW,QADO;AAEZV,QAAAA,GAAG,EAAEY;AAFO,OALR;AASRX,MAAAA,WAAW,EAAE;AACTF,QAAAA,GAAG,EAAEW,QADI;AAETV,QAAAA,GAAG,EAAEY;AAFI;AATL,KAAD,CAAX;AAcH,GAxBD;;AA0BD,sBACK,oBAAC,YAAD;AACE,IAAA,KAAK,EAAE;AACNC,MAAAA,KAAK,EAAE,MADD;AAENC,MAAAA,MAAM,EAAE,MAFF;AAGNC,MAAAA,WAAW,EAAE,MAHP;AAINC,MAAAA,SAAS,EAAE,KAJL;AAKNC,MAAAA,YAAY,EAAE;AALR,KADT;AAQE,IAAA,eAAe,EAAGf,eARpB;AASE,IAAA,KAAK,EAAE,CAAC,WAAD,CATT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADL;AAYF,CA3DD;;AA6DA,eAAeX,MAAf","sourcesContent":["import Autocomplete from 'react-google-autocomplete';\nimport React, { useState } from 'react';\n\nconst search = () => {\n    /**\n     * When the user types an address in the search box\n     * @param place\n     */\n\n    const [location, setLocation] = useState({\n        address: '',\n        area: '',\n        city: ( city ) ? city : '',\n        state: ( state ) ? state : '',\n        markerPosition: {\n            lat: '',\n            lng: '' \n        },\n        mapPosition: {\n            lat: '',\n            lng: ''\n        },\n    })\n\n    const onPlaceSelected = place => {\n        const address = place.formatted_address;\n        const addressArray =  place.address_components;\n        const city = this.getCity( addressArray );\n        const area = this.getArea( addressArray );\n        const state = this.getState( addressArray );\n        const latValue = place.geometry.location.lat();\n        const lngValue = place.geometry.location.lng();\n      \n        // Set these values in the state.\n        setLocation({\n            address: ( address ) ? address : '',\n            area: ( area ) ? area : '',\n            city: ( city ) ? city : '',\n            state: ( state ) ? state : '',\n            markerPosition: {\n                lat: latValue,\n                lng: lngValue \n            },\n            mapPosition: {\n                lat: latValue,\n                lng: lngValue\n            },\n        })\n    };\n\n   return (\n        <Autocomplete\n          style={{\n           width: '100%',\n           height: '40px',\n           paddingLeft: '16px',\n           marginTop: '2px',\n           marginBottom: '100px'\n          }}\n          onPlaceSelected={ onPlaceSelected }\n          types={['(regions)']}/>\n    )\n}\n\nexport default search;"]},"metadata":{},"sourceType":"module"}