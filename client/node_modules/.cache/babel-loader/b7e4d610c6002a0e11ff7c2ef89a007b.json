{"ast":null,"code":"var _jsxFileName = \"/home/kubatarlowski/local-bytes/src/Components/Restaurants/Restaurants.js\";\nimport React, { useEffect, useState, Fragment } from 'react';\nimport axios from 'axios';\nimport Restaurant from './Restaurant/Restaurant';\nimport firebase from '../../axios-restaurants';\nimport styles from './Restaurants.module.css';\nimport Autocomplete from 'react-google-autocomplete';\nimport Categories from '../Categories/Categories';\n\nconst Restaurants = () => {\n  const [businesses, setBusinesses] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [searchLocation, setSearchLocation] = useState(null);\n  const [categories, setCategories] = useState([]);\n\n  const deleteBusiness = index => {\n    const newBus = [...businesses];\n    newBus.splice(index, 1);\n    setBusinesses(newBus);\n  };\n\n  const updateVisited = (newBus, index) => {\n    deleteBusiness(index);\n    firebase.post('/visited.json', {\n      id: newBus.id\n    }).catch(err => console.log(err));\n  };\n\n  const updateVisit = (newBus, index) => {\n    deleteBusiness(index);\n    firebase.post('/visit.json', {\n      id: newBus.id\n    }).catch(err => console.log(err));\n  };\n\n  useEffect(() => {\n    async function getRestaurants() {\n      await axios.get(\"https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search\", {\n        headers: {\n          Authorization: `Bearer ${process.env.REACT_APP_API_KEY}`\n        },\n        params: {\n          location: searchLocation,\n          categories: categories.join(',')\n        }\n      }).then(res => {\n        setLoading(false);\n        setBusinesses(res.data.businesses);\n      }).catch(err => {\n        console.log(err);\n      });\n    }\n\n    if (searchLocation) {\n      setLoading(true);\n      getRestaurants();\n    }\n  }, [searchLocation, categories]); //rating, price, phone, categories, name\n\n  const returnedRes = businesses.map((business, index) => {\n    return /*#__PURE__*/React.createElement(Restaurant, {\n      visit: () => updateVisit(business, index),\n      visited: () => updateVisited(business, index),\n      key: business.id,\n      name: business.name,\n      address: business.location.address1,\n      city: business.location.city,\n      state: business.location.state,\n      stars: business.rating,\n      categories: business.categories,\n      phone: business.display_phone,\n      pic: business.image_url,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 16\n      }\n    });\n  });\n\n  function categorySelected(category, selected) {\n    console.log(category, selected);\n\n    if (selected) {\n      const oldSelected = [...categories];\n      oldSelected.push(category);\n      setCategories(oldSelected);\n    } else {\n      const newSelected = categories.filter(el => {\n        return category !== el;\n      });\n      setCategories(newSelected);\n    }\n  }\n\n  const possibleCat = ['mexican', 'chinese', 'indian', 'burgers', 'pizza', 'thai', 'japanese', 'mediterranean', 'mideastern', 'breakfast_brunch', 'brazilian', 'cafes', 'caribbean', 'creperies', 'delis', 'diners', 'latin', 'noodles', 'sandwiches', 'polish', 'portuguese', 'seafood', 'soulfood', 'steak', 'sushi', 'vegetarian', 'waffles', 'wraps'];\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Autocomplete, {\n    onPlaceSelected: place => setSearchLocation(place.formatted_address),\n    className: styles.Search,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"header\", {\n    style: {\n      textAlign: 'left',\n      fontSize: 'large',\n      marginLeft: '3%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }\n  }, \"Categories\"), /*#__PURE__*/React.createElement(Categories, {\n    categories: possibleCat,\n    checked: categorySelected,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.Restaurants,\n    style: {\n      marginTop: '5px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }\n  }, loading ? /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 28\n    }\n  }, \"Loading ...\") : returnedRes));\n};\n\nexport default Restaurants;","map":{"version":3,"sources":["/home/kubatarlowski/local-bytes/src/Components/Restaurants/Restaurants.js"],"names":["React","useEffect","useState","Fragment","axios","Restaurant","firebase","styles","Autocomplete","Categories","Restaurants","businesses","setBusinesses","loading","setLoading","searchLocation","setSearchLocation","categories","setCategories","deleteBusiness","index","newBus","splice","updateVisited","post","id","catch","err","console","log","updateVisit","getRestaurants","get","headers","Authorization","process","env","REACT_APP_API_KEY","params","location","join","then","res","data","returnedRes","map","business","name","address1","city","state","rating","display_phone","image_url","categorySelected","category","selected","oldSelected","push","newSelected","filter","el","possibleCat","place","formatted_address","Search","textAlign","fontSize","marginLeft","marginTop"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, Fragment } from 'react';\nimport axios from 'axios';\nimport Restaurant from './Restaurant/Restaurant'\nimport firebase from '../../axios-restaurants';\nimport styles from './Restaurants.module.css'\nimport Autocomplete from 'react-google-autocomplete'\nimport Categories from '../Categories/Categories'\n\nconst Restaurants = () => {\n    \n    const [businesses, setBusinesses] = useState([])\n    const [loading,setLoading] = useState(false)\n    const [searchLocation, setSearchLocation] = useState(null)\n    const [categories, setCategories] = useState([])\n\n    const deleteBusiness = (index) => {\n        const newBus = [...businesses];\n        newBus.splice(index, 1);\n        setBusinesses(newBus)\n    }\n\n    const updateVisited = (newBus,index) => {\n        deleteBusiness(index)\n        firebase.post('/visited.json',{id: newBus.id})\n            .catch(err => console.log(err))\n    }\n\n    const updateVisit = (newBus,index) => {\n        deleteBusiness(index)\n        firebase.post('/visit.json',{id:newBus.id})\n            .catch(err => console.log(err))\n    }\n\n\n    useEffect(() => {\n        async function getRestaurants() {\n            await axios.get(\"https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search\", {\n                headers: {\n                    Authorization: `Bearer ${process.env.REACT_APP_API_KEY}`\n                }, params: {        \n                    location: searchLocation,\n                    categories: categories.join(',')\n                }, \n    \n            }).then((res) => {\n                setLoading(false)\n                setBusinesses(res.data.businesses)\n    \n            }).catch((err) => {\n                console.log(err)\n            })\n        }\n        if (searchLocation){\n            setLoading(true)\n            getRestaurants()\n        }\n \n    }, [searchLocation,categories]);\n          \n    //rating, price, phone, categories, name\n\n    const returnedRes = businesses.map((business, index) => {\n        return <Restaurant \n            visit={() => updateVisit(business,index)}\n            visited={() => updateVisited(business,index)}\n            key={business.id}\n            name={business.name}\n            address={business.location.address1}\n            city={business.location.city}\n            state={business.location.state}\n            stars={business.rating}\n            categories={business.categories}\n            phone={business.display_phone}\n            pic={business.image_url}\n        />\n    })\n\n    function categorySelected(category, selected) {\n        console.log(category, selected)\n        if (selected) {\n            const oldSelected = [...categories]\n            oldSelected.push(category)\n            setCategories(oldSelected)\n        } else {\n            const newSelected = categories.filter((el) => {\n                return category!==el\n            })\n            setCategories(newSelected)\n        }\n    }\n\n    const possibleCat = ['mexican', 'chinese', 'indian', 'burgers', \n        'pizza', 'thai', 'japanese', 'mediterranean', 'mideastern',\n        'breakfast_brunch','brazilian','cafes','caribbean','creperies',\n        'delis','diners','latin','noodles','sandwiches','polish',\n        'portuguese','seafood','soulfood','steak','sushi','vegetarian',\n        'waffles','wraps']\n\n    return (\n        <Fragment>\n            <Autocomplete\n            onPlaceSelected={(place) => setSearchLocation(place.formatted_address)}\n            className={styles.Search}/>\n            <header style={{textAlign: 'left', fontSize: 'large', marginLeft: '3%'}}>Categories</header>\n            <Categories\n                categories={possibleCat}\n                checked={categorySelected}/>\n            <div className = {styles.Restaurants}\n                style={{marginTop:'5px'}}>\n                {loading ? <p>Loading ...</p> : returnedRes}\n            </div>\n        </Fragment>\n    )\n}\n\nexport default Restaurants;"]},"metadata":{},"sourceType":"module"}