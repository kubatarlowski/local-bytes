{"ast":null,"code":"var _jsxFileName = \"/home/kubatarlowski/local-bytes/src/Components/Search/Search.js\";\nimport React from \"react\";\nimport usePlacesAutocomplete, { getGeocode, getLatLng } from \"use-places-autocomplete\";\n\nconst Search = () => {\n  const {\n    ready,\n    value,\n    suggestions: {\n      status,\n      data\n    },\n    setValue,\n    clearSuggestions\n  } = usePlacesAutocomplete({\n    requestOptions: {\n      /* Define search scope here */\n    },\n    debounce: 300\n  }); //   const ref = useOnclickOutside(() => {\n  //     // When user clicks outside of the component, we can dismiss\n  //     // the searched suggestions by calling this method\n  //     clearSuggestions();\n  //   });\n\n  const handleInput = e => {\n    // Update the keyword of the input element\n    setValue(e.target.value);\n  };\n\n  const handleSelect = ({\n    description\n  }) => () => {\n    // When user selects a place, we can replace the keyword without request data from API\n    // by setting the second parameter as \"false\"\n    setValue(description, false);\n    clearSuggestions(); // Get latitude and longitude via utility functions\n\n    getGeocode({\n      address: description\n    }).then(results => getLatLng(results[0])).then(({\n      lat,\n      lng\n    }) => {\n      console.log(\"📍 Coordinates: \", {\n        lat,\n        lng\n      });\n    }).catch(error => {\n      console.log(\"😱 Error: \", error);\n    });\n  };\n\n  const renderSuggestions = () => data.map(suggestion => {\n    const {\n      id,\n      structured_formatting: {\n        main_text,\n        secondary_text\n      }\n    } = suggestion;\n    return /*#__PURE__*/React.createElement(\"li\", {\n      key: id,\n      onClick: handleSelect(suggestion),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"strong\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }\n    }, main_text), \" \", /*#__PURE__*/React.createElement(\"small\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 40\n      }\n    }, secondary_text));\n  });\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    value: value,\n    onChange: handleInput,\n    disabled: !ready,\n    placeholder: \"Where are you going?\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }), status === \"OK\" && /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 27\n    }\n  }, renderSuggestions()));\n};\n\nexport default Search;","map":{"version":3,"sources":["/home/kubatarlowski/local-bytes/src/Components/Search/Search.js"],"names":["React","usePlacesAutocomplete","getGeocode","getLatLng","Search","ready","value","suggestions","status","data","setValue","clearSuggestions","requestOptions","debounce","handleInput","e","target","handleSelect","description","address","then","results","lat","lng","console","log","catch","error","renderSuggestions","map","suggestion","id","structured_formatting","main_text","secondary_text"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,qBAAP,IACEC,UADF,EAEEC,SAFF,QAGO,yBAHP;;AAKA,MAAMC,MAAM,GAAG,MAAM;AACnB,QAAM;AACJC,IAAAA,KADI;AAEJC,IAAAA,KAFI;AAGJC,IAAAA,WAAW,EAAE;AAAEC,MAAAA,MAAF;AAAUC,MAAAA;AAAV,KAHT;AAIJC,IAAAA,QAJI;AAKJC,IAAAA;AALI,MAMFV,qBAAqB,CAAC;AACxBW,IAAAA,cAAc,EAAE;AACd;AADc,KADQ;AAIxBC,IAAAA,QAAQ,EAAE;AAJc,GAAD,CANzB,CADmB,CAarB;AACA;AACA;AACA;AACA;;AAEE,QAAMC,WAAW,GAAIC,CAAD,IAAO;AACzB;AACAL,IAAAA,QAAQ,CAACK,CAAC,CAACC,MAAF,CAASV,KAAV,CAAR;AACD,GAHD;;AAKA,QAAMW,YAAY,GAAG,CAAC;AAAEC,IAAAA;AAAF,GAAD,KAAqB,MAAM;AAC9C;AACA;AACAR,IAAAA,QAAQ,CAACQ,WAAD,EAAc,KAAd,CAAR;AACAP,IAAAA,gBAAgB,GAJ8B,CAM9C;;AACAT,IAAAA,UAAU,CAAC;AAAEiB,MAAAA,OAAO,EAAED;AAAX,KAAD,CAAV,CACGE,IADH,CACSC,OAAD,IAAalB,SAAS,CAACkB,OAAO,CAAC,CAAD,CAAR,CAD9B,EAEGD,IAFH,CAEQ,CAAC;AAAEE,MAAAA,GAAF;AAAOC,MAAAA;AAAP,KAAD,KAAkB;AACtBC,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgC;AAAEH,QAAAA,GAAF;AAAOC,QAAAA;AAAP,OAAhC;AACD,KAJH,EAKGG,KALH,CAKUC,KAAD,IAAW;AAChBH,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BE,KAA1B;AACD,KAPH;AAQD,GAfD;;AAiBA,QAAMC,iBAAiB,GAAG,MACxBnB,IAAI,CAACoB,GAAL,CAAUC,UAAD,IAAgB;AACvB,UAAM;AACJC,MAAAA,EADI;AAEJC,MAAAA,qBAAqB,EAAE;AAAEC,QAAAA,SAAF;AAAaC,QAAAA;AAAb;AAFnB,QAGFJ,UAHJ;AAKA,wBACE;AAAI,MAAA,GAAG,EAAEC,EAAT;AAAa,MAAA,OAAO,EAAEd,YAAY,CAACa,UAAD,CAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAASG,SAAT,CADF,oBAC+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAQC,cAAR,CAD/B,CADF;AAKD,GAXD,CADF;;AAcA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,KAAK,EAAE5B,KADT;AAEE,IAAA,QAAQ,EAAEQ,WAFZ;AAGE,IAAA,QAAQ,EAAE,CAACT,KAHb;AAIE,IAAA,WAAW,EAAC,sBAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAQGG,MAAM,KAAK,IAAX,iBAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKoB,iBAAiB,EAAtB,CARtB,CADF;AAYD,CAnED;;AAqEA,eAAexB,MAAf","sourcesContent":["import React from \"react\";\nimport usePlacesAutocomplete, {\n  getGeocode,\n  getLatLng,\n} from \"use-places-autocomplete\";\n\nconst Search = () => {\n  const {\n    ready,\n    value,\n    suggestions: { status, data },\n    setValue,\n    clearSuggestions,\n  } = usePlacesAutocomplete({\n    requestOptions: {\n      /* Define search scope here */\n    },\n    debounce: 300,\n  });\n//   const ref = useOnclickOutside(() => {\n//     // When user clicks outside of the component, we can dismiss\n//     // the searched suggestions by calling this method\n//     clearSuggestions();\n//   });\n\n  const handleInput = (e) => {\n    // Update the keyword of the input element\n    setValue(e.target.value);\n  };\n\n  const handleSelect = ({ description }) => () => {\n    // When user selects a place, we can replace the keyword without request data from API\n    // by setting the second parameter as \"false\"\n    setValue(description, false);\n    clearSuggestions();\n\n    // Get latitude and longitude via utility functions\n    getGeocode({ address: description })\n      .then((results) => getLatLng(results[0]))\n      .then(({ lat, lng }) => {\n        console.log(\"📍 Coordinates: \", { lat, lng });\n      })\n      .catch((error) => {\n        console.log(\"😱 Error: \", error);\n      });\n  };\n\n  const renderSuggestions = () =>\n    data.map((suggestion) => {\n      const {\n        id,\n        structured_formatting: { main_text, secondary_text },\n      } = suggestion;\n\n      return (\n        <li key={id} onClick={handleSelect(suggestion)}>\n          <strong>{main_text}</strong> <small>{secondary_text}</small>\n        </li>\n      );\n    });\n\n  return (\n    <div>\n      <input\n        value={value}\n        onChange={handleInput}\n        disabled={!ready}\n        placeholder=\"Where are you going?\"\n      />\n      {/* We can use the \"status\" to decide whether we should display the dropdown or not */}\n      {status === \"OK\" && <ul>{renderSuggestions()}</ul>}\n    </div>\n  );\n};\n\nexport default Search;\n"]},"metadata":{},"sourceType":"module"}